(defun problem1 (n)
  "If we list all the natural numbers below 10 that are multiples of 3
  or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find
  the sum of all the multiples of 3 or 5 below 1000."
  (let ((result 0)
        (n (- n 1)))
    (while (> n 0)
      (if (or (= (mod n 3) 0) (= (mod n 5) 0))
          (setq result (+ result n)))
      (setq n (- n 1)))
    result))

(ert-deftest problem1-test ()
  "Project Euler Problem 1"
  (should (equal 23     (problem1 10)))
  (should (equal 233168 (problem1 1000))))

(defun problem2 (maximum)
  "Each new term in the Fibonacci sequence is generated by adding the
  previous two terms. By starting with 1 and 2, the first 10 terms
  will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the
  terms in the Fibonacci sequence whose values do not exceed four
  million, find the sum of the even-valued terms."
  (let ((x 1)
        (f 1)
        (r 0))
    (while (< f maximum)
      (if (= (mod f 2) 0)
          (setq r (+ r f)))
      (setq f2 f)
      (setq f (+ x f))
      (setq x f2))
    r))


(ert-deftest problem2-test ()
  "Project Euler Problem 2"
  (should (equal 10 (problem2 10)))
  (should (equal 4613732 (problem2 4000000))))

(defun problem3 (n)
  "The prime factors of 13195 are 5, 7, 13 and 29.
   What is the largest prime factor of the number 600851475143 ?"
  (let ((x n)
        (p 2))
    (while (> x p)
      (if (= (mod x p) 0)
          (setq x (/ x p))
        (setq p (+ p 1))))
    x))

(ert-deftest problem3-test ()
  "Project Euler Problem 3"
  (should (equal 29   (problem3 13195)))
  (should (equal 6857 (problem3 600851475143))))

(defun is-palindrome (n)
  (let* ((s (number-to-string n))
         (l (string-width s))
         (x 0)
         (y (- l 1))
         (r t))
    (while (and r (>= y x))
      (if (= (aref s y) (aref s x))
          (progn
            (setq y (- y 1))
            (setq x (+ x 1)))
        (setq r nil)))
    r))

(ert-deftest is-palindrome-test ()
  "Project Euler Problem 4"
  (should (is-palindrome 9009))
  (should (is-palindrome 0))
  (should (is-palindrome 906609))
  (should (null (is-palindrome 91009))))

(defun problem4 (n)
  "A palindromic number reads the same both ways. The largest
  palindrome made from the product of two 2-digit numbers is 9009
  = 91 Ã— 99.

  Find the largest palindrome made from the product of two
  3-digit numbers."
  (let* ((n (string-to-int (make-string n ?9)))
         (x n)
         (y n)
         (r 0))
    (while (> x 0)
      (while (> y 0)
        (if (and (> (* x y) r) (is-palindrome (* x y)))
            (setq r (* x y)))
        (setq y (- y 1)))
      (setq x (- x 1))
      (setq y x))
    r))

(ert-deftest problem4-test ()
  "Project Euler Problem 4"
  (should (equal 9009   (problem4 2)))
  (should (equal 906609 (problem4 3))))
